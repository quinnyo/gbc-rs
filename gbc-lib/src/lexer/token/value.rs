// STD Dependencies -----------------------------------------------------------
use std::fmt;


// Token Value ----------------------------------------------------------------
#[derive(Debug, Eq, PartialEq, Clone, Hash)]
pub enum TokenValue {
    INCLUDE,
    BINARY,
    USING,
    VOLATILE,
    SECTION,

    DB,
    DW,
    BW,
    DS,
    DS8,
    DS16,

    ROM0,
    ROMX,
    WRAM0,
    WRAMX,
    RAM,
    RAMX,
    HRAM,

    DEFAULT,
    BANK,
    EQU,

    BLOCK,
    ENDBLOCK,

    MACRO,
    ENDMACRO,

    IF,
    THEN,
    ELSE,
    ENDIF,

    FOR,
    IN,
    TO,
    REPEAT,
    ENDFOR,

    OpenBracket,
    CloseBracket,
    OpenParen,
    CloseParen,
    Colon,
    Point,
    Comma,
    Zero,
    One,

    // Registers
    A,
    B,
    C,
    D,
    E,
    H,
    L,
    AF,
    BC,
    DE,
    HL,
    SP,
    HLD,
    HLI,
    Z,
    NZ,
    NC,

    // Macros
    DBG,
    MAX,
    MIN,
    FLOOR,
    CEIL,
    ROUND,
    LOG,
    EXP,
    SQRT,
    ABS,
    SIN,
    COS,
    TAN,
    ASIN,
    ACOS,
    ATAN,
    ATAN2,
    STRUPR,
    STRLWR,
    STRLEN,
    STRSUB,
    STRIN,
    STRPADR,
    STRPADL,

    // Instructions
    Adc,
    Add,
    And,
    Bit,
    Call,
    Ccf,
    Cp,
    Cpl,
    Daa,
    Dec,
    Di,
    Ei,
    Halt,
    Inc,
    Jp,
    Jr,
    Ld,
    Ldh,
    Ldsp,
    Nop,
    Or,
    Pop,
    Push,
    Res,
    Ret,
    Reti,
    Rl,
    Rla,
    Rlc,
    Rlca,
    Rr,
    Rra,
    Rrc,
    Rrca,
    Rst,
    Sbc,
    Scf,
    Set,
    Sla,
    Sra,
    Srl,
    Stop,
    Sub,
    Swap,
    Xor,

    // Meta Instructions
    Subw,
    Addw,
    Ldxa,
    Mul,
    Div,
    Incx,
    Decx,
    Retx,
    Vsync,

    Raw(String)
}

impl TokenValue {
    pub fn as_str(&self) -> &str {
        match self {
            TokenValue::INCLUDE  => "INCLUDE",
            TokenValue::BINARY   => "BINARY",
            TokenValue::USING    => "USING",
            TokenValue::VOLATILE => "VOLATILE",
            TokenValue::SECTION  => "SECTION",

            TokenValue::DB       => "DB",
            TokenValue::DW       => "DW",
            TokenValue::BW       => "BW",
            TokenValue::DS       => "DS",
            TokenValue::DS8      => "DS8",
            TokenValue::DS16     => "DS16",

            TokenValue::ROM0     => "ROM0",
            TokenValue::ROMX     => "ROMX",
            TokenValue::WRAM0    => "WRAM0",
            TokenValue::WRAMX    => "WRAMX",
            TokenValue::RAM      => "RAM",
            TokenValue::RAMX     => "RAMX",
            TokenValue::HRAM     => "HRAM",

            TokenValue::DEFAULT  => "DEFAULT",
            TokenValue::BANK     => "BANK",
            TokenValue::EQU      => "EQU",

            TokenValue::BLOCK    => "BLOCK",
            TokenValue::ENDBLOCK => "ENDBLOCK",

            TokenValue::MACRO    => "MACRO",
            TokenValue::ENDMACRO => "ENDMACRO",

            TokenValue::IF       => "IF",
            TokenValue::THEN     => "THEN",
            TokenValue::ELSE     => "ELSE",
            TokenValue::ENDIF    => "ENDIF",

            TokenValue::FOR      => "FOR",
            TokenValue::IN       => "IN",
            TokenValue::TO       => "TO",
            TokenValue::REPEAT   => "REPEAT",
            TokenValue::ENDFOR   => "ENDFOR",

            TokenValue::OpenBracket => "[",
            TokenValue::CloseBracket => "]",
            TokenValue::OpenParen => "(",
            TokenValue::CloseParen => ")",
            TokenValue::Colon    => ":",
            TokenValue::Point    => ".",
            TokenValue::Comma    => ",",
            TokenValue::Zero     => "0",
            TokenValue::One      => "1",

            // Registers
            TokenValue::A        => "a",
            TokenValue::B        => "b",
            TokenValue::C        => "c",
            TokenValue::D        => "d",
            TokenValue::E        => "e",
            TokenValue::H        => "h",
            TokenValue::L        => "l",
            TokenValue::AF       => "af",
            TokenValue::BC       => "bc",
            TokenValue::DE       => "de",
            TokenValue::HL       => "hl",
            TokenValue::SP       => "sp",
            TokenValue::HLD      => "hld",
            TokenValue::HLI      => "hli",
            TokenValue::Z        => "z",
            TokenValue::NZ       => "nz",
            TokenValue::NC       => "nc",

            // Macros
            TokenValue::DBG      => "DBG",
            TokenValue::MAX      => "MAX",
            TokenValue::MIN      => "MIN",
            TokenValue::FLOOR    => "FLOOR",
            TokenValue::CEIL     => "CEIL",
            TokenValue::ROUND    => "ROUND",
            TokenValue::LOG      => "LOG",
            TokenValue::EXP      => "EXP",
            TokenValue::SQRT     => "SQRT",
            TokenValue::ABS      => "ABS",
            TokenValue::SIN      => "SIN",
            TokenValue::COS      => "COS",
            TokenValue::TAN      => "TAN",
            TokenValue::ASIN     => "ASIN",
            TokenValue::ACOS     => "ACOS",
            TokenValue::ATAN     => "ATAN",
            TokenValue::ATAN2    => "ATAN2",
            TokenValue::STRUPR   => "STRUPR",
            TokenValue::STRLWR   => "STRLWR",
            TokenValue::STRLEN   => "STRLEN",
            TokenValue::STRSUB   => "STRSUB",
            TokenValue::STRIN    => "STRIN",
            TokenValue::STRPADR  => "STRPADR",
            TokenValue::STRPADL  => "STRPADL",

            // Instructions
            TokenValue::Adc      => "adc",
            TokenValue::Add      => "add",
            TokenValue::And      => "and",
            TokenValue::Bit      => "bit",
            TokenValue::Call     => "call",
            TokenValue::Ccf      => "ccf",
            TokenValue::Cp       => "cp",
            TokenValue::Cpl      => "cpl",
            TokenValue::Daa      => "daa",
            TokenValue::Dec      => "dec",
            TokenValue::Di       => "di",
            TokenValue::Ei       => "ei",
            TokenValue::Halt     => "halt",
            TokenValue::Inc      => "inc",
            TokenValue::Jp       => "jp",
            TokenValue::Jr       => "jr",
            TokenValue::Ld       => "ld",
            TokenValue::Ldh      => "ldh",
            TokenValue::Ldsp     => "ldsp",
            TokenValue::Nop      => "nop",
            TokenValue::Or       => "or",
            TokenValue::Pop      => "pop",
            TokenValue::Push     => "push",
            TokenValue::Res      => "res",
            TokenValue::Ret      => "ret",
            TokenValue::Reti     => "reti",
            TokenValue::Rl       => "rl",
            TokenValue::Rla      => "rla",
            TokenValue::Rlc      => "rlc",
            TokenValue::Rlca     => "rlca",
            TokenValue::Rr       => "rr",
            TokenValue::Rra      => "rra",
            TokenValue::Rrc      => "rrc",
            TokenValue::Rrca     => "rrca",
            TokenValue::Rst      => "rst",
            TokenValue::Sbc      => "sbc",
            TokenValue::Scf      => "scf",
            TokenValue::Set      => "set",
            TokenValue::Sla      => "sla",
            TokenValue::Sra      => "sra",
            TokenValue::Srl      => "srl",
            TokenValue::Stop     => "stop",
            TokenValue::Sub      => "sub",
            TokenValue::Swap     => "swap",
            TokenValue::Xor      => "xor",

            // Meta Instructions
            TokenValue::Subw     => "subw",
            TokenValue::Addw     => "addw",
            TokenValue::Ldxa     => "ldxa",
            TokenValue::Mul      => "mul",
            TokenValue::Div      => "div",
            TokenValue::Incx     => "incx",
            TokenValue::Decx     => "decx",
            TokenValue::Retx     => "retx",
            TokenValue::Vsync    => "vsync",

            TokenValue::Raw(s) => s.as_str()
        }
    }

    pub fn to_string(&self) -> String {
        self.as_str().to_string()
    }
}

impl fmt::Display for TokenValue {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.as_str())
    }
}

impl From<String> for TokenValue {
    fn from(s: String) -> TokenValue {
        match s.as_str() {
            "INCLUDE"   =>  TokenValue::INCLUDE,
            "BINARY"    =>  TokenValue::BINARY,
            "USING"     =>  TokenValue::USING,
            "VOLATILE"  =>  TokenValue::VOLATILE,
            "SECTION"   =>  TokenValue::SECTION,

            "DB"        =>  TokenValue::DB,
            "DW"        =>  TokenValue::DW,
            "BW"        =>  TokenValue::BW,
            "DS"        =>  TokenValue::DS,
            "DS8"       =>  TokenValue::DS8,
            "DS16"      =>  TokenValue::DS16,

            "ROM0"      => TokenValue::ROM0,
            "ROMX"      => TokenValue::ROMX,
            "WRAM0"     => TokenValue::WRAM0,
            "WRAMX"     => TokenValue::WRAMX,
            "RAM"       => TokenValue::RAM,
            "RAMX"      => TokenValue::RAMX,
            "HRAM"      => TokenValue::HRAM,

            "DEFAULT"   => TokenValue::DEFAULT,
            "BANK"      => TokenValue::BANK,
            "EQU"       => TokenValue::EQU,

            "BLOCK"     => TokenValue::BLOCK,
            "ENDBLOCK"  => TokenValue::ENDBLOCK,

            "MACRO"     => TokenValue::MACRO,
            "ENDMACRO"  => TokenValue::ENDMACRO,

            "IF"        => TokenValue::IF,
            "THEN"      => TokenValue::THEN,
            "ELSE"      => TokenValue::ELSE,
            "ENDIF"     => TokenValue::ENDIF,

            "FOR"       => TokenValue::FOR,
            "IN"        => TokenValue::IN,
            "TO"        => TokenValue::TO,
            "REPEAT"    => TokenValue::REPEAT,
            "ENDFOR"    => TokenValue::ENDFOR,

            "["         => TokenValue::OpenBracket,
            "]"         => TokenValue::CloseBracket,
            "("         => TokenValue::OpenParen,
            ")"         => TokenValue::CloseParen,
            ":"         => TokenValue::Colon,
            "."         => TokenValue::Point,
            ","         => TokenValue::Comma,
            "0"         => TokenValue::Zero,
            "1"         => TokenValue::One,

            // Registers
            "a"         => TokenValue::A,
            "b"         => TokenValue::B,
            "c"         => TokenValue::C,
            "d"         => TokenValue::D,
            "e"         => TokenValue::E,
            "h"         => TokenValue::H,
            "l"         => TokenValue::L,
            "af"        => TokenValue::AF,
            "bc"        => TokenValue::BC,
            "de"        => TokenValue::DE,
            "hl"        => TokenValue::HL,
            "sp"        => TokenValue::SP,

            "hld"       => TokenValue::HLD,
            "hli"       => TokenValue::HLI,
            "z"         => TokenValue::Z,
            "nz"        => TokenValue::NZ,
            "nc"        => TokenValue::NC,

            // Macros
            "DBG"       => TokenValue::DBG,
            "MAX"       => TokenValue::MAX,
            "MIN"       => TokenValue::MIN,
            "FLOOR"     => TokenValue::FLOOR,
            "CEIL"      => TokenValue::CEIL,
            "ROUND"     => TokenValue::ROUND,
            "LOG"       => TokenValue::LOG,
            "EXP"       => TokenValue::EXP,
            "SQRT"      => TokenValue::SQRT,
            "ABS"       => TokenValue::ABS,
            "SIN"       => TokenValue::SIN,
            "COS"       => TokenValue::COS,
            "TAN"       => TokenValue::TAN,
            "ASIN"      => TokenValue::ASIN,
            "ACOS"      => TokenValue::ACOS,
            "ATAN"      => TokenValue::ATAN,
            "ATAN2"     => TokenValue::ATAN2,
            "STRUPR"    => TokenValue::STRUPR,
            "STRLWR"    => TokenValue::STRLWR,
            "STRLEN"    => TokenValue::STRLEN,
            "STRSUB"    => TokenValue::STRSUB,
            "STRIN"     => TokenValue::STRIN,
            "STRPADR"   => TokenValue::STRPADR,
            "STRPADL"   => TokenValue::STRPADL,

            // Instructions
            "adc"       => TokenValue::Adc,
            "add"       => TokenValue::Add,
            "and"       => TokenValue::And,
            "bit"       => TokenValue::Bit,
            "call"      => TokenValue::Call,
            "ccf"       => TokenValue::Ccf,
            "cp"        => TokenValue::Cp,
            "cpl"       => TokenValue::Cpl,
            "daa"       => TokenValue::Daa,
            "dec"       => TokenValue::Dec,
            "di"        => TokenValue::Di,
            "ei"        => TokenValue::Ei,
            "halt"      => TokenValue::Halt,
            "inc"       => TokenValue::Inc,
            "jp"        => TokenValue::Jp,
            "jr"        => TokenValue::Jr,
            "ld"        => TokenValue::Ld,
            "ldh"       => TokenValue::Ldh,
            "ldsp"      => TokenValue::Ldsp,
            "nop"       => TokenValue::Nop,
            "or"        => TokenValue::Or,
            "pop"       => TokenValue::Pop,
            "push"      => TokenValue::Push,
            "res"       => TokenValue::Res,
            "ret"       => TokenValue::Ret,
            "reti"      => TokenValue::Reti,
            "rl"        => TokenValue::Rl,
            "rla"       => TokenValue::Rla,
            "rlc"       => TokenValue::Rlc,
            "rlca"      => TokenValue::Rlca,
            "rr"        => TokenValue::Rr,
            "rra"       => TokenValue::Rra,
            "rrc"       => TokenValue::Rrc,
            "rrca"      => TokenValue::Rrca,
            "rst"       => TokenValue::Rst,
            "sbc"       => TokenValue::Sbc,
            "scf"       => TokenValue::Scf,
            "set"       => TokenValue::Set,
            "sla"       => TokenValue::Sla,
            "sra"       => TokenValue::Sra,
            "srl"       => TokenValue::Srl,
            "stop"      => TokenValue::Stop,
            "sub"       => TokenValue::Sub,
            "swap"      => TokenValue::Swap,
            "xor"       => TokenValue::Xor,

            // Meta Instructions
            "subw"      =>  TokenValue::Subw,
            "addw"      =>  TokenValue::Addw,
            "ldxa"      =>  TokenValue::Ldxa,
            "mul"       =>  TokenValue::Mul,
            "div"       =>  TokenValue::Div,
            "incx"      =>  TokenValue::Incx,
            "decx"      =>  TokenValue::Decx,
            "retx"      =>  TokenValue::Retx,
            "vsync"     =>  TokenValue::Vsync,

            // Variables
            _           => TokenValue::Raw(s)
        }
    }
}

