// STD Dependencies -----------------------------------------------------------
use std::fmt;


// Symbols --------------------------------------------------------------------
#[derive(Debug, Eq, PartialEq, Clone, Hash)]
pub enum Symbol {
    INCLUDE,
    BINARY,
    USING,
    VOLATILE,
    SECTION,

    DB,
    DW,
    BW,
    DS,
    DS8,
    DS16,

    ROM0,
    ROMX,
    WRAM0,
    WRAMX,
    RAM,
    RAMX,
    HRAM,

    DEFAULT,
    BANK,
    EQU,

    BLOCK,
    ENDBLOCK,

    MACRO,
    ENDMACRO,

    IF,
    THEN,
    ELSE,
    ENDIF,

    FOR,
    IN,
    TO,
    REPEAT,
    ENDFOR,

    OpenBracket,
    CloseBracket,
    OpenParen,
    CloseParen,
    Colon,
    Point,
    Comma,
    Zero,
    One,

    // Registers
    A,
    B,
    C,
    D,
    E,
    H,
    L,
    AF,
    BC,
    DE,
    HL,
    SP,
    HLD,
    HLI,
    Z,
    NZ,
    NC,

    // Macros
    DBG,
    MAX,
    MIN,
    FLOOR,
    CEIL,
    ROUND,
    LOG,
    EXP,
    SQRT,
    ABS,
    SIN,
    COS,
    TAN,
    ASIN,
    ACOS,
    ATAN,
    ATAN2,
    STRUPR,
    STRLWR,
    STRLEN,
    STRSUB,
    STRIN,
    STRPADR,
    STRPADL,

    // Instructions
    Adc,
    Add,
    And,
    Bit,
    Call,
    Ccf,
    Cp,
    Cpl,
    Daa,
    Dec,
    Di,
    Ei,
    Halt,
    Inc,
    Jp,
    Jr,
    Ld,
    Ldh,
    Ldsp,
    Nop,
    Or,
    Pop,
    Push,
    Res,
    Ret,
    Reti,
    Rl,
    Rla,
    Rlc,
    Rlca,
    Rr,
    Rra,
    Rrc,
    Rrca,
    Rst,
    Sbc,
    Scf,
    Set,
    Sla,
    Sra,
    Srl,
    Stop,
    Sub,
    Swap,
    Xor,

    // Meta Instructions
    Msg,
    Brk,
    Subw,
    Addw,
    Ldxa,
    Mul,
    Div,
    Incx,
    Decx,
    Retx,
    Vsync,

    Raw(String)
}

impl Symbol {
    pub fn as_str(&self) -> &str {
        match self {
            Symbol::INCLUDE  => "INCLUDE",
            Symbol::BINARY   => "BINARY",
            Symbol::USING    => "USING",
            Symbol::VOLATILE => "VOLATILE",
            Symbol::SECTION  => "SECTION",

            Symbol::DB       => "DB",
            Symbol::DW       => "DW",
            Symbol::BW       => "BW",
            Symbol::DS       => "DS",
            Symbol::DS8      => "DS8",
            Symbol::DS16     => "DS16",

            Symbol::ROM0     => "ROM0",
            Symbol::ROMX     => "ROMX",
            Symbol::WRAM0    => "WRAM0",
            Symbol::WRAMX    => "WRAMX",
            Symbol::RAM      => "RAM",
            Symbol::RAMX     => "RAMX",
            Symbol::HRAM     => "HRAM",

            Symbol::DEFAULT  => "DEFAULT",
            Symbol::BANK     => "BANK",
            Symbol::EQU      => "EQU",

            Symbol::BLOCK    => "BLOCK",
            Symbol::ENDBLOCK => "ENDBLOCK",

            Symbol::MACRO    => "MACRO",
            Symbol::ENDMACRO => "ENDMACRO",

            Symbol::IF       => "IF",
            Symbol::THEN     => "THEN",
            Symbol::ELSE     => "ELSE",
            Symbol::ENDIF    => "ENDIF",

            Symbol::FOR      => "FOR",
            Symbol::IN       => "IN",
            Symbol::TO       => "TO",
            Symbol::REPEAT   => "REPEAT",
            Symbol::ENDFOR   => "ENDFOR",

            Symbol::OpenBracket => "[",
            Symbol::CloseBracket => "]",
            Symbol::OpenParen => "(",
            Symbol::CloseParen => ")",
            Symbol::Colon    => ":",
            Symbol::Point    => ".",
            Symbol::Comma    => ",",
            Symbol::Zero     => "0",
            Symbol::One      => "1",

            // Registers
            Symbol::A        => "a",
            Symbol::B        => "b",
            Symbol::C        => "c",
            Symbol::D        => "d",
            Symbol::E        => "e",
            Symbol::H        => "h",
            Symbol::L        => "l",
            Symbol::AF       => "af",
            Symbol::BC       => "bc",
            Symbol::DE       => "de",
            Symbol::HL       => "hl",
            Symbol::SP       => "sp",
            Symbol::HLD      => "hld",
            Symbol::HLI      => "hli",
            Symbol::Z        => "z",
            Symbol::NZ       => "nz",
            Symbol::NC       => "nc",

            // Macros
            Symbol::DBG      => "DBG",
            Symbol::MAX      => "MAX",
            Symbol::MIN      => "MIN",
            Symbol::FLOOR    => "FLOOR",
            Symbol::CEIL     => "CEIL",
            Symbol::ROUND    => "ROUND",
            Symbol::LOG      => "LOG",
            Symbol::EXP      => "EXP",
            Symbol::SQRT     => "SQRT",
            Symbol::ABS      => "ABS",
            Symbol::SIN      => "SIN",
            Symbol::COS      => "COS",
            Symbol::TAN      => "TAN",
            Symbol::ASIN     => "ASIN",
            Symbol::ACOS     => "ACOS",
            Symbol::ATAN     => "ATAN",
            Symbol::ATAN2    => "ATAN2",
            Symbol::STRUPR   => "STRUPR",
            Symbol::STRLWR   => "STRLWR",
            Symbol::STRLEN   => "STRLEN",
            Symbol::STRSUB   => "STRSUB",
            Symbol::STRIN    => "STRIN",
            Symbol::STRPADR  => "STRPADR",
            Symbol::STRPADL  => "STRPADL",

            // Instructions
            Symbol::Adc      => "adc",
            Symbol::Add      => "add",
            Symbol::And      => "and",
            Symbol::Bit      => "bit",
            Symbol::Call     => "call",
            Symbol::Ccf      => "ccf",
            Symbol::Cp       => "cp",
            Symbol::Cpl      => "cpl",
            Symbol::Daa      => "daa",
            Symbol::Dec      => "dec",
            Symbol::Di       => "di",
            Symbol::Ei       => "ei",
            Symbol::Halt     => "halt",
            Symbol::Inc      => "inc",
            Symbol::Jp       => "jp",
            Symbol::Jr       => "jr",
            Symbol::Ld       => "ld",
            Symbol::Ldh      => "ldh",
            Symbol::Ldsp     => "ldsp",
            Symbol::Nop      => "nop",
            Symbol::Or       => "or",
            Symbol::Pop      => "pop",
            Symbol::Push     => "push",
            Symbol::Res      => "res",
            Symbol::Ret      => "ret",
            Symbol::Reti     => "reti",
            Symbol::Rl       => "rl",
            Symbol::Rla      => "rla",
            Symbol::Rlc      => "rlc",
            Symbol::Rlca     => "rlca",
            Symbol::Rr       => "rr",
            Symbol::Rra      => "rra",
            Symbol::Rrc      => "rrc",
            Symbol::Rrca     => "rrca",
            Symbol::Rst      => "rst",
            Symbol::Sbc      => "sbc",
            Symbol::Scf      => "scf",
            Symbol::Set      => "set",
            Symbol::Sla      => "sla",
            Symbol::Sra      => "sra",
            Symbol::Srl      => "srl",
            Symbol::Stop     => "stop",
            Symbol::Sub      => "sub",
            Symbol::Swap     => "swap",
            Symbol::Xor      => "xor",

            // Meta Instructions
            Symbol::Brk      => "brk",
            Symbol::Msg      => "msg",
            Symbol::Subw     => "subw",
            Symbol::Addw     => "addw",
            Symbol::Ldxa     => "ldxa",
            Symbol::Mul      => "mul",
            Symbol::Div      => "div",
            Symbol::Incx     => "incx",
            Symbol::Decx     => "decx",
            Symbol::Retx     => "retx",
            Symbol::Vsync    => "vsync",

            Symbol::Raw(s) => s.as_str()
        }
    }

    pub fn to_string(&self) -> String {
        self.as_str().to_string()
    }
}

impl fmt::Display for Symbol {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.as_str())
    }
}

impl From<String> for Symbol {
    fn from(s: String) -> Symbol {
        match s.as_str() {
            "INCLUDE"   =>  Symbol::INCLUDE,
            "BINARY"    =>  Symbol::BINARY,
            "USING"     =>  Symbol::USING,
            "VOLATILE"  =>  Symbol::VOLATILE,
            "SECTION"   =>  Symbol::SECTION,

            "DB"        =>  Symbol::DB,
            "DW"        =>  Symbol::DW,
            "BW"        =>  Symbol::BW,
            "DS"        =>  Symbol::DS,
            "DS8"       =>  Symbol::DS8,
            "DS16"      =>  Symbol::DS16,

            "ROM0"      => Symbol::ROM0,
            "ROMX"      => Symbol::ROMX,
            "WRAM0"     => Symbol::WRAM0,
            "WRAMX"     => Symbol::WRAMX,
            "RAM"       => Symbol::RAM,
            "RAMX"      => Symbol::RAMX,
            "HRAM"      => Symbol::HRAM,

            "DEFAULT"   => Symbol::DEFAULT,
            "BANK"      => Symbol::BANK,
            "EQU"       => Symbol::EQU,

            "BLOCK"     => Symbol::BLOCK,
            "ENDBLOCK"  => Symbol::ENDBLOCK,

            "MACRO"     => Symbol::MACRO,
            "ENDMACRO"  => Symbol::ENDMACRO,

            "IF"        => Symbol::IF,
            "THEN"      => Symbol::THEN,
            "ELSE"      => Symbol::ELSE,
            "ENDIF"     => Symbol::ENDIF,

            "FOR"       => Symbol::FOR,
            "IN"        => Symbol::IN,
            "TO"        => Symbol::TO,
            "REPEAT"    => Symbol::REPEAT,
            "ENDFOR"    => Symbol::ENDFOR,

            "["         => Symbol::OpenBracket,
            "]"         => Symbol::CloseBracket,
            "("         => Symbol::OpenParen,
            ")"         => Symbol::CloseParen,
            ":"         => Symbol::Colon,
            "."         => Symbol::Point,
            ","         => Symbol::Comma,
            "0"         => Symbol::Zero,
            "1"         => Symbol::One,

            // Registers
            "a"         => Symbol::A,
            "b"         => Symbol::B,
            "c"         => Symbol::C,
            "d"         => Symbol::D,
            "e"         => Symbol::E,
            "h"         => Symbol::H,
            "l"         => Symbol::L,
            "af"        => Symbol::AF,
            "bc"        => Symbol::BC,
            "de"        => Symbol::DE,
            "hl"        => Symbol::HL,
            "sp"        => Symbol::SP,

            "hld"       => Symbol::HLD,
            "hli"       => Symbol::HLI,
            "z"         => Symbol::Z,
            "nz"        => Symbol::NZ,
            "nc"        => Symbol::NC,

            // Macros
            "DBG"       => Symbol::DBG,
            "MAX"       => Symbol::MAX,
            "MIN"       => Symbol::MIN,
            "FLOOR"     => Symbol::FLOOR,
            "CEIL"      => Symbol::CEIL,
            "ROUND"     => Symbol::ROUND,
            "LOG"       => Symbol::LOG,
            "EXP"       => Symbol::EXP,
            "SQRT"      => Symbol::SQRT,
            "ABS"       => Symbol::ABS,
            "SIN"       => Symbol::SIN,
            "COS"       => Symbol::COS,
            "TAN"       => Symbol::TAN,
            "ASIN"      => Symbol::ASIN,
            "ACOS"      => Symbol::ACOS,
            "ATAN"      => Symbol::ATAN,
            "ATAN2"     => Symbol::ATAN2,
            "STRUPR"    => Symbol::STRUPR,
            "STRLWR"    => Symbol::STRLWR,
            "STRLEN"    => Symbol::STRLEN,
            "STRSUB"    => Symbol::STRSUB,
            "STRIN"     => Symbol::STRIN,
            "STRPADR"   => Symbol::STRPADR,
            "STRPADL"   => Symbol::STRPADL,

            // Instructions
            "adc"       => Symbol::Adc,
            "add"       => Symbol::Add,
            "and"       => Symbol::And,
            "bit"       => Symbol::Bit,
            "call"      => Symbol::Call,
            "ccf"       => Symbol::Ccf,
            "cp"        => Symbol::Cp,
            "cpl"       => Symbol::Cpl,
            "daa"       => Symbol::Daa,
            "dec"       => Symbol::Dec,
            "di"        => Symbol::Di,
            "ei"        => Symbol::Ei,
            "halt"      => Symbol::Halt,
            "inc"       => Symbol::Inc,
            "jp"        => Symbol::Jp,
            "jr"        => Symbol::Jr,
            "ld"        => Symbol::Ld,
            "ldh"       => Symbol::Ldh,
            "ldsp"      => Symbol::Ldsp,
            "nop"       => Symbol::Nop,
            "or"        => Symbol::Or,
            "pop"       => Symbol::Pop,
            "push"      => Symbol::Push,
            "res"       => Symbol::Res,
            "ret"       => Symbol::Ret,
            "reti"      => Symbol::Reti,
            "rl"        => Symbol::Rl,
            "rla"       => Symbol::Rla,
            "rlc"       => Symbol::Rlc,
            "rlca"      => Symbol::Rlca,
            "rr"        => Symbol::Rr,
            "rra"       => Symbol::Rra,
            "rrc"       => Symbol::Rrc,
            "rrca"      => Symbol::Rrca,
            "rst"       => Symbol::Rst,
            "sbc"       => Symbol::Sbc,
            "scf"       => Symbol::Scf,
            "set"       => Symbol::Set,
            "sla"       => Symbol::Sla,
            "sra"       => Symbol::Sra,
            "srl"       => Symbol::Srl,
            "stop"      => Symbol::Stop,
            "sub"       => Symbol::Sub,
            "swap"      => Symbol::Swap,
            "xor"       => Symbol::Xor,

            // Meta Instructions
            "brk"       => Symbol::Brk,
            "msg"       => Symbol::Msg,
            "subw"      =>  Symbol::Subw,
            "addw"      =>  Symbol::Addw,
            "ldxa"      =>  Symbol::Ldxa,
            "mul"       =>  Symbol::Mul,
            "div"       =>  Symbol::Div,
            "incx"      =>  Symbol::Incx,
            "decx"      =>  Symbol::Decx,
            "retx"      =>  Symbol::Retx,
            "vsync"     =>  Symbol::Vsync,

            // Variables
            _           => Symbol::Raw(s)
        }
    }
}

