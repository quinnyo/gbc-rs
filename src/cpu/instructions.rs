use crate::cpu::{FlagModifier, FlagState, Instruction, Register, Flag, Argument};

// Auto generated Instruction Data
pub fn instructions() -> Vec<Instruction> {
    vec![
        Instruction { code: 0, prefix: None, name: "nop".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 1, prefix: None, name: "ld".to_string(), size: 3, cycles: 12, cycles_min: None, layout: vec![Argument::Register(Register::BC), Argument::WordValue], argument: Some(Argument::WordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 2, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::BC), Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 3, prefix: None, name: "inc".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::BC)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 4, prefix: None, name: "inc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Keep } },
        Instruction { code: 5, prefix: None, name: "dec".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Keep } },
        Instruction { code: 6, prefix: None, name: "ld".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::B), Argument::ByteValue], argument: Some(Argument::ByteValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 7, prefix: None, name: "rlca".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Clear, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Result } },
        Instruction { code: 8, prefix: None, name: "ld".to_string(), size: 3, cycles: 20, cycles_min: None, layout: vec![Argument::MemoryLookupWordValue, Argument::Register(Register::SP)], argument: Some(Argument::MemoryLookupWordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 9, prefix: None, name: "add".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::HL), Argument::Register(Register::BC)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 10, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupRegister(Register::BC)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 11, prefix: None, name: "dec".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::BC)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 12, prefix: None, name: "inc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Keep } },
        Instruction { code: 13, prefix: None, name: "dec".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Keep } },
        Instruction { code: 14, prefix: None, name: "ld".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::C), Argument::ByteValue], argument: Some(Argument::ByteValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 15, prefix: None, name: "rrca".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Clear, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Result } },
        Instruction { code: 16, prefix: None, name: "stop".to_string(), size: 2, cycles: 4, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 17, prefix: None, name: "ld".to_string(), size: 3, cycles: 12, cycles_min: None, layout: vec![Argument::Register(Register::DE), Argument::WordValue], argument: Some(Argument::WordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 18, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::DE), Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 19, prefix: None, name: "inc".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::DE)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 20, prefix: None, name: "inc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Keep } },
        Instruction { code: 21, prefix: None, name: "dec".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Keep } },
        Instruction { code: 22, prefix: None, name: "ld".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::D), Argument::ByteValue], argument: Some(Argument::ByteValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 23, prefix: None, name: "rla".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Clear, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Result } },
        Instruction { code: 24, prefix: None, name: "jr".to_string(), size: 2, cycles: 12, cycles_min: None, layout: vec![Argument::SignedByteValue], argument: Some(Argument::SignedByteValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 25, prefix: None, name: "add".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::HL), Argument::Register(Register::DE)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 26, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupRegister(Register::DE)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 27, prefix: None, name: "dec".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::DE)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 28, prefix: None, name: "inc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Keep } },
        Instruction { code: 29, prefix: None, name: "dec".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Keep } },
        Instruction { code: 30, prefix: None, name: "ld".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::E), Argument::ByteValue], argument: Some(Argument::ByteValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 31, prefix: None, name: "rra".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Clear, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Result } },
        Instruction { code: 32, prefix: None, name: "jr".to_string(), size: 2, cycles: 12, cycles_min: Some(8), layout: vec![Argument::Flag(Flag::NoZero), Argument::SignedByteValue], argument: Some(Argument::SignedByteValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 33, prefix: None, name: "ld".to_string(), size: 3, cycles: 12, cycles_min: None, layout: vec![Argument::Register(Register::HL), Argument::WordValue], argument: Some(Argument::WordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 34, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HLIncrement), Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 35, prefix: None, name: "inc".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 36, prefix: None, name: "inc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Keep } },
        Instruction { code: 37, prefix: None, name: "dec".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Keep } },
        Instruction { code: 38, prefix: None, name: "ld".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::H), Argument::ByteValue], argument: Some(Argument::ByteValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 39, prefix: None, name: "daa".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Keep, c: FlagModifier::Clear, h: FlagModifier::Result } },
        Instruction { code: 40, prefix: None, name: "jr".to_string(), size: 2, cycles: 12, cycles_min: Some(8), layout: vec![Argument::Flag(Flag::Zero), Argument::SignedByteValue], argument: Some(Argument::SignedByteValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 41, prefix: None, name: "add".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::HL), Argument::Register(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 42, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupRegister(Register::HLIncrement)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 43, prefix: None, name: "dec".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 44, prefix: None, name: "inc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Keep } },
        Instruction { code: 45, prefix: None, name: "dec".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Keep } },
        Instruction { code: 46, prefix: None, name: "ld".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::L), Argument::ByteValue], argument: Some(Argument::ByteValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 47, prefix: None, name: "cpl".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Set, c: FlagModifier::Set, h: FlagModifier::Keep } },
        Instruction { code: 48, prefix: None, name: "jr".to_string(), size: 2, cycles: 12, cycles_min: Some(8), layout: vec![Argument::Flag(Flag::NoCarry), Argument::SignedByteValue], argument: Some(Argument::SignedByteValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 49, prefix: None, name: "ld".to_string(), size: 3, cycles: 12, cycles_min: None, layout: vec![Argument::Register(Register::SP), Argument::WordValue], argument: Some(Argument::WordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 50, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HLDecrement), Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 51, prefix: None, name: "inc".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::SP)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 52, prefix: None, name: "inc".to_string(), size: 1, cycles: 12, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Keep } },
        Instruction { code: 53, prefix: None, name: "dec".to_string(), size: 1, cycles: 12, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Keep } },
        Instruction { code: 54, prefix: None, name: "ld".to_string(), size: 2, cycles: 12, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL), Argument::ByteValue], argument: Some(Argument::ByteValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 55, prefix: None, name: "scf".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Set } },
        Instruction { code: 56, prefix: None, name: "jr".to_string(), size: 2, cycles: 12, cycles_min: Some(8), layout: vec![Argument::Flag(Flag::Carry), Argument::SignedByteValue], argument: Some(Argument::SignedByteValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 57, prefix: None, name: "add".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::HL), Argument::Register(Register::SP)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 58, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupRegister(Register::HLDecrement)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 59, prefix: None, name: "dec".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::SP)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 60, prefix: None, name: "inc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Keep } },
        Instruction { code: 61, prefix: None, name: "dec".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Keep } },
        Instruction { code: 62, prefix: None, name: "ld".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator), Argument::ByteValue], argument: Some(Argument::ByteValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 63, prefix: None, name: "ccf".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Result } },
        Instruction { code: 64, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B), Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 65, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B), Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 66, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B), Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 67, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B), Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 68, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B), Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 69, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B), Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 70, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::B), Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 71, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B), Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 72, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C), Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 73, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C), Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 74, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C), Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 75, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C), Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 76, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C), Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 77, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C), Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 78, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::C), Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 79, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C), Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 80, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D), Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 81, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D), Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 82, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D), Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 83, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D), Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 84, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D), Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 85, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D), Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 86, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::D), Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 87, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D), Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 88, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E), Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 89, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E), Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 90, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E), Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 91, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E), Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 92, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E), Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 93, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E), Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 94, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::E), Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 95, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E), Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 96, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H), Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 97, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H), Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 98, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H), Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 99, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H), Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 100, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H), Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 101, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H), Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 102, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::H), Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 103, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H), Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 104, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L), Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 105, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L), Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 106, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L), Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 107, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L), Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 108, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L), Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 109, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L), Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 110, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::L), Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 111, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L), Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 112, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL), Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 113, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL), Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 114, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL), Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 115, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL), Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 116, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL), Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 117, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL), Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 118, prefix: None, name: "halt".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 119, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL), Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 120, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 121, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 122, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 123, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 124, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 125, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 126, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 127, prefix: None, name: "ld".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 128, prefix: None, name: "add".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 129, prefix: None, name: "add".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 130, prefix: None, name: "add".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 131, prefix: None, name: "add".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 132, prefix: None, name: "add".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 133, prefix: None, name: "add".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 134, prefix: None, name: "add".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 135, prefix: None, name: "add".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 136, prefix: None, name: "adc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 137, prefix: None, name: "adc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 138, prefix: None, name: "adc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 139, prefix: None, name: "adc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 140, prefix: None, name: "adc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 141, prefix: None, name: "adc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 142, prefix: None, name: "adc".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 143, prefix: None, name: "adc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 144, prefix: None, name: "sub".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 145, prefix: None, name: "sub".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 146, prefix: None, name: "sub".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 147, prefix: None, name: "sub".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 148, prefix: None, name: "sub".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 149, prefix: None, name: "sub".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 150, prefix: None, name: "sub".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 151, prefix: None, name: "sub".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 152, prefix: None, name: "sbc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 153, prefix: None, name: "sbc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 154, prefix: None, name: "sbc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 155, prefix: None, name: "sbc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 156, prefix: None, name: "sbc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 157, prefix: None, name: "sbc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 158, prefix: None, name: "sbc".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 159, prefix: None, name: "sbc".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 160, prefix: None, name: "and".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Set, h: FlagModifier::Clear } },
        Instruction { code: 161, prefix: None, name: "and".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Set, h: FlagModifier::Clear } },
        Instruction { code: 162, prefix: None, name: "and".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Set, h: FlagModifier::Clear } },
        Instruction { code: 163, prefix: None, name: "and".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Set, h: FlagModifier::Clear } },
        Instruction { code: 164, prefix: None, name: "and".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Set, h: FlagModifier::Clear } },
        Instruction { code: 165, prefix: None, name: "and".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Set, h: FlagModifier::Clear } },
        Instruction { code: 166, prefix: None, name: "and".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Set, h: FlagModifier::Clear } },
        Instruction { code: 167, prefix: None, name: "and".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Set, h: FlagModifier::Clear } },
        Instruction { code: 168, prefix: None, name: "xor".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 169, prefix: None, name: "xor".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 170, prefix: None, name: "xor".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 171, prefix: None, name: "xor".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 172, prefix: None, name: "xor".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 173, prefix: None, name: "xor".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 174, prefix: None, name: "xor".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 175, prefix: None, name: "xor".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 176, prefix: None, name: "or".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 177, prefix: None, name: "or".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 178, prefix: None, name: "or".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 179, prefix: None, name: "or".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 180, prefix: None, name: "or".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 181, prefix: None, name: "or".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 182, prefix: None, name: "or".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 183, prefix: None, name: "or".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 184, prefix: None, name: "cp".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::B)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 185, prefix: None, name: "cp".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 186, prefix: None, name: "cp".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::D)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 187, prefix: None, name: "cp".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::E)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 188, prefix: None, name: "cp".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::H)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 189, prefix: None, name: "cp".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::L)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 190, prefix: None, name: "cp".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 191, prefix: None, name: "cp".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 192, prefix: None, name: "ret".to_string(), size: 1, cycles: 20, cycles_min: Some(8), layout: vec![Argument::Flag(Flag::NoZero)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 193, prefix: None, name: "pop".to_string(), size: 1, cycles: 12, cycles_min: None, layout: vec![Argument::Register(Register::BC)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 194, prefix: None, name: "jp".to_string(), size: 3, cycles: 16, cycles_min: Some(12), layout: vec![Argument::Flag(Flag::NoZero), Argument::WordValue], argument: Some(Argument::WordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 195, prefix: None, name: "jp".to_string(), size: 3, cycles: 16, cycles_min: None, layout: vec![Argument::WordValue], argument: Some(Argument::WordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 196, prefix: None, name: "call".to_string(), size: 3, cycles: 24, cycles_min: Some(12), layout: vec![Argument::Flag(Flag::NoZero), Argument::WordValue], argument: Some(Argument::WordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 197, prefix: None, name: "push".to_string(), size: 1, cycles: 16, cycles_min: None, layout: vec![Argument::Register(Register::BC)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 198, prefix: None, name: "add".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::ByteValue], argument: Some(Argument::ByteValue), flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 199, prefix: None, name: "rst".to_string(), size: 1, cycles: 16, cycles_min: None, layout: vec![Argument::ConstantValue(0)], argument: Some(Argument::ConstantValue(0)), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 200, prefix: None, name: "ret".to_string(), size: 1, cycles: 20, cycles_min: Some(8), layout: vec![Argument::Flag(Flag::Zero)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 201, prefix: None, name: "ret".to_string(), size: 1, cycles: 16, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 202, prefix: None, name: "jp".to_string(), size: 3, cycles: 16, cycles_min: Some(12), layout: vec![Argument::Flag(Flag::Zero), Argument::WordValue], argument: Some(Argument::WordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 203, prefix: None, name: "prefix".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 204, prefix: None, name: "call".to_string(), size: 3, cycles: 24, cycles_min: Some(12), layout: vec![Argument::Flag(Flag::Zero), Argument::WordValue], argument: Some(Argument::WordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 205, prefix: None, name: "call".to_string(), size: 3, cycles: 24, cycles_min: None, layout: vec![Argument::WordValue], argument: Some(Argument::WordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 206, prefix: None, name: "adc".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::ByteValue], argument: Some(Argument::ByteValue), flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 207, prefix: None, name: "rst".to_string(), size: 1, cycles: 16, cycles_min: None, layout: vec![Argument::ConstantValue(8)], argument: Some(Argument::ConstantValue(8)), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 208, prefix: None, name: "ret".to_string(), size: 1, cycles: 20, cycles_min: Some(8), layout: vec![Argument::Flag(Flag::NoCarry)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 209, prefix: None, name: "pop".to_string(), size: 1, cycles: 12, cycles_min: None, layout: vec![Argument::Register(Register::DE)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 210, prefix: None, name: "jp".to_string(), size: 3, cycles: 16, cycles_min: Some(12), layout: vec![Argument::Flag(Flag::NoCarry), Argument::WordValue], argument: Some(Argument::WordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 211, prefix: None, name: "invalid".to_string(), size: 0, cycles: 0, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 212, prefix: None, name: "call".to_string(), size: 3, cycles: 24, cycles_min: Some(12), layout: vec![Argument::Flag(Flag::NoCarry), Argument::WordValue], argument: Some(Argument::WordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 213, prefix: None, name: "push".to_string(), size: 1, cycles: 16, cycles_min: None, layout: vec![Argument::Register(Register::DE)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 214, prefix: None, name: "sub".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::ByteValue], argument: Some(Argument::ByteValue), flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 215, prefix: None, name: "rst".to_string(), size: 1, cycles: 16, cycles_min: None, layout: vec![Argument::ConstantValue(16)], argument: Some(Argument::ConstantValue(16)), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 216, prefix: None, name: "ret".to_string(), size: 1, cycles: 20, cycles_min: Some(8), layout: vec![Argument::Flag(Flag::Carry)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 217, prefix: None, name: "reti".to_string(), size: 1, cycles: 16, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 218, prefix: None, name: "jp".to_string(), size: 3, cycles: 16, cycles_min: Some(12), layout: vec![Argument::Flag(Flag::Carry), Argument::WordValue], argument: Some(Argument::WordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 219, prefix: None, name: "invalid".to_string(), size: 0, cycles: 0, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 220, prefix: None, name: "call".to_string(), size: 3, cycles: 24, cycles_min: Some(12), layout: vec![Argument::Flag(Flag::Carry), Argument::WordValue], argument: Some(Argument::WordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 221, prefix: None, name: "invalid".to_string(), size: 0, cycles: 0, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 222, prefix: None, name: "sbc".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::ByteValue], argument: Some(Argument::ByteValue), flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 223, prefix: None, name: "rst".to_string(), size: 1, cycles: 16, cycles_min: None, layout: vec![Argument::ConstantValue(24)], argument: Some(Argument::ConstantValue(24)), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 224, prefix: None, name: "ldh".to_string(), size: 2, cycles: 12, cycles_min: None, layout: vec![Argument::MemoryLookupByteValue, Argument::Register(Register::Accumulator)], argument: Some(Argument::MemoryLookupByteValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 225, prefix: None, name: "pop".to_string(), size: 1, cycles: 12, cycles_min: None, layout: vec![Argument::Register(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 226, prefix: None, name: "ld".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::C), Argument::Register(Register::Accumulator)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 227, prefix: None, name: "invalid".to_string(), size: 0, cycles: 0, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 228, prefix: None, name: "invalid".to_string(), size: 0, cycles: 0, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 229, prefix: None, name: "push".to_string(), size: 1, cycles: 16, cycles_min: None, layout: vec![Argument::Register(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 230, prefix: None, name: "and".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::ByteValue], argument: Some(Argument::ByteValue), flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Set, h: FlagModifier::Clear } },
        Instruction { code: 231, prefix: None, name: "rst".to_string(), size: 1, cycles: 16, cycles_min: None, layout: vec![Argument::ConstantValue(32)], argument: Some(Argument::ConstantValue(32)), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 232, prefix: None, name: "add".to_string(), size: 2, cycles: 16, cycles_min: None, layout: vec![Argument::Register(Register::SP), Argument::SignedByteValue], argument: Some(Argument::SignedByteValue), flags: FlagState { z: FlagModifier::Clear, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 233, prefix: None, name: "jp".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![Argument::MemoryLookupRegister(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 234, prefix: None, name: "ld".to_string(), size: 3, cycles: 16, cycles_min: None, layout: vec![Argument::MemoryLookupWordValue, Argument::Register(Register::Accumulator)], argument: Some(Argument::MemoryLookupWordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 235, prefix: None, name: "invalid".to_string(), size: 0, cycles: 0, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 236, prefix: None, name: "invalid".to_string(), size: 0, cycles: 0, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 237, prefix: None, name: "invalid".to_string(), size: 0, cycles: 0, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 238, prefix: None, name: "xor".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::ByteValue], argument: Some(Argument::ByteValue), flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 239, prefix: None, name: "rst".to_string(), size: 1, cycles: 16, cycles_min: None, layout: vec![Argument::ConstantValue(40)], argument: Some(Argument::ConstantValue(40)), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 240, prefix: None, name: "ldh".to_string(), size: 2, cycles: 12, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupByteValue], argument: Some(Argument::MemoryLookupByteValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 241, prefix: None, name: "pop".to_string(), size: 1, cycles: 12, cycles_min: None, layout: vec![Argument::Register(Register::AF)], argument: None, flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Result, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 242, prefix: None, name: "ld".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupRegister(Register::C)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 243, prefix: None, name: "di".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 244, prefix: None, name: "invalid".to_string(), size: 0, cycles: 0, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 245, prefix: None, name: "push".to_string(), size: 1, cycles: 16, cycles_min: None, layout: vec![Argument::Register(Register::AF)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 246, prefix: None, name: "or".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::ByteValue], argument: Some(Argument::ByteValue), flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Clear, c: FlagModifier::Clear, h: FlagModifier::Clear } },
        Instruction { code: 247, prefix: None, name: "rst".to_string(), size: 1, cycles: 16, cycles_min: None, layout: vec![Argument::ConstantValue(48)], argument: Some(Argument::ConstantValue(48)), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 248, prefix: None, name: "ld".to_string(), size: 2, cycles: 12, cycles_min: None, layout: vec![Argument::Register(Register::HL), Argument::SignedByteValue], argument: Some(Argument::SignedByteValue), flags: FlagState { z: FlagModifier::Clear, n: FlagModifier::Clear, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 249, prefix: None, name: "ld".to_string(), size: 1, cycles: 8, cycles_min: None, layout: vec![Argument::Register(Register::SP), Argument::Register(Register::HL)], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 250, prefix: None, name: "ld".to_string(), size: 3, cycles: 16, cycles_min: None, layout: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupWordValue], argument: Some(Argument::MemoryLookupWordValue), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 251, prefix: None, name: "ei".to_string(), size: 1, cycles: 4, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 252, prefix: None, name: "invalid".to_string(), size: 0, cycles: 0, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 253, prefix: None, name: "invalid".to_string(), size: 0, cycles: 0, cycles_min: None, layout: vec![], argument: None, flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
        Instruction { code: 254, prefix: None, name: "cp".to_string(), size: 2, cycles: 8, cycles_min: None, layout: vec![Argument::ByteValue], argument: Some(Argument::ByteValue), flags: FlagState { z: FlagModifier::Result, n: FlagModifier::Set, c: FlagModifier::Result, h: FlagModifier::Result } },
        Instruction { code: 255, prefix: None, name: "rst".to_string(), size: 1, cycles: 16, cycles_min: None, layout: vec![Argument::ConstantValue(56)], argument: Some(Argument::ConstantValue(56)), flags: FlagState { z: FlagModifier::Keep, n: FlagModifier::Keep, c: FlagModifier::Keep, h: FlagModifier::Keep } },
    ]
}
pub fn instruction_max_arg_count(mnemonic: &str) -> usize {
    match mnemonic {
        "adc" => 1,
        "add" => 2,
        "and" => 1,
        "call" => 2,
        "ccf" => 0,
        "cp" => 1,
        "cpl" => 0,
        "daa" => 0,
        "dec" => 1,
        "di" => 0,
        "ei" => 0,
        "halt" => 0,
        "inc" => 1,
        "jp" => 2,
        "jr" => 2,
        "ld" => 2,
        "ldh" => 2,
        "nop" => 0,
        "or" => 1,
        "pop" => 1,
        "push" => 1,
        "ret" => 1,
        "reti" => 0,
        "rla" => 0,
        "rlca" => 0,
        "rra" => 0,
        "rrca" => 0,
        "rst" => 1,
        "sbc" => 1,
        "scf" => 0,
        "stop" => 0,
        "sub" => 1,
        "xor" => 1,
        _ => 0
    }
}