use crate::cpu::{FlagModifier, FlagState, Instruction, Argument, Register, Flag};

// Auto Generated
pub fn instructions() -> Vec<Instruction> {
    vec![
        Instruction { op_code: 0, prefix: None, mnemonic: "nop".to_string(), cycles: 4, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 1, prefix: None, mnemonic: "ld".to_string(), cycles: 12, cycles_min: None, args: vec![Argument::Register(Register::BC), Argument::Word], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 2, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::BC), Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 3, prefix: None, mnemonic: "inc".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::BC)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 4, prefix: None, mnemonic: "inc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 5, prefix: None, mnemonic: "dec".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 6, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::B), Argument::Byte], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 7, prefix: None, mnemonic: "rlca".to_string(), cycles: 4, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Unset, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 8, prefix: None, mnemonic: "ld".to_string(), cycles: 20, cycles_min: None, args: vec![Argument::MemoryLookupWord, Argument::Register(Register::SP)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 9, prefix: None, mnemonic: "add".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::HL), Argument::Register(Register::BC)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 10, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupRegister(Register::BC)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 11, prefix: None, mnemonic: "dec".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::BC)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 12, prefix: None, mnemonic: "inc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 13, prefix: None, mnemonic: "dec".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 14, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::C), Argument::Byte], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 15, prefix: None, mnemonic: "rrca".to_string(), cycles: 4, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Unset, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 16, prefix: None, mnemonic: "stop".to_string(), cycles: 4, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 17, prefix: None, mnemonic: "ld".to_string(), cycles: 12, cycles_min: None, args: vec![Argument::Register(Register::DE), Argument::Word], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 18, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::DE), Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 19, prefix: None, mnemonic: "inc".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::DE)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 20, prefix: None, mnemonic: "inc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 21, prefix: None, mnemonic: "dec".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 22, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::D), Argument::Byte], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 23, prefix: None, mnemonic: "rla".to_string(), cycles: 4, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Unset, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 24, prefix: None, mnemonic: "jr".to_string(), cycles: 12, cycles_min: None, args: vec![Argument::ByteSigned], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 25, prefix: None, mnemonic: "add".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::HL), Argument::Register(Register::DE)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 26, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupRegister(Register::DE)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 27, prefix: None, mnemonic: "dec".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::DE)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 28, prefix: None, mnemonic: "inc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 29, prefix: None, mnemonic: "dec".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 30, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::E), Argument::Byte], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 31, prefix: None, mnemonic: "rra".to_string(), cycles: 4, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Unset, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 32, prefix: None, mnemonic: "jr".to_string(), cycles: 12, cycles_min: Some(8), args: vec![Argument::Flag(Flag::NoZero), Argument::ByteSigned], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 33, prefix: None, mnemonic: "ld".to_string(), cycles: 12, cycles_min: None, args: vec![Argument::Register(Register::HL), Argument::Word], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 34, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HLIncrement), Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 35, prefix: None, mnemonic: "inc".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::HL)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 36, prefix: None, mnemonic: "inc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 37, prefix: None, mnemonic: "dec".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 38, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::H), Argument::Byte], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 39, prefix: None, mnemonic: "daa".to_string(), cycles: 4, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Untouched, carry: FlagModifier::Unset, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 40, prefix: None, mnemonic: "jr".to_string(), cycles: 12, cycles_min: Some(8), args: vec![Argument::Flag(Flag::Zero), Argument::ByteSigned], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 41, prefix: None, mnemonic: "add".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::HL), Argument::Register(Register::HL)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 42, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupRegister(Register::HLIncrement)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 43, prefix: None, mnemonic: "dec".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::HL)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 44, prefix: None, mnemonic: "inc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 45, prefix: None, mnemonic: "dec".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 46, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::L), Argument::Byte], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 47, prefix: None, mnemonic: "cpl".to_string(), cycles: 4, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Set, carry: FlagModifier::Set, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 48, prefix: None, mnemonic: "jr".to_string(), cycles: 12, cycles_min: Some(8), args: vec![Argument::Flag(Flag::NoCarry), Argument::ByteSigned], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 49, prefix: None, mnemonic: "ld".to_string(), cycles: 12, cycles_min: None, args: vec![Argument::Register(Register::SP), Argument::Word], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 50, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HLDecrement), Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 51, prefix: None, mnemonic: "inc".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::SP)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 52, prefix: None, mnemonic: "inc".to_string(), cycles: 12, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 53, prefix: None, mnemonic: "dec".to_string(), cycles: 12, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 54, prefix: None, mnemonic: "ld".to_string(), cycles: 12, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HL), Argument::Byte], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 55, prefix: None, mnemonic: "scf".to_string(), cycles: 4, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Set } },
        Instruction { op_code: 56, prefix: None, mnemonic: "jr".to_string(), cycles: 12, cycles_min: Some(8), args: vec![Argument::Flag(Flag::Carry), Argument::ByteSigned], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 57, prefix: None, mnemonic: "add".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::HL), Argument::Register(Register::SP)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 58, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupRegister(Register::HLDecrement)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 59, prefix: None, mnemonic: "dec".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::SP)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 60, prefix: None, mnemonic: "inc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 61, prefix: None, mnemonic: "dec".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 62, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Byte], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 63, prefix: None, mnemonic: "ccf".to_string(), cycles: 4, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 64, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::B), Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 65, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::B), Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 66, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::B), Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 67, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::B), Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 68, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::B), Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 69, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::B), Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 70, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::B), Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 71, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::B), Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 72, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::C), Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 73, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::C), Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 74, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::C), Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 75, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::C), Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 76, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::C), Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 77, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::C), Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 78, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::C), Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 79, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::C), Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 80, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::D), Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 81, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::D), Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 82, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::D), Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 83, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::D), Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 84, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::D), Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 85, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::D), Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 86, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::D), Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 87, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::D), Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 88, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::E), Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 89, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::E), Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 90, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::E), Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 91, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::E), Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 92, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::E), Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 93, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::E), Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 94, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::E), Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 95, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::E), Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 96, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::H), Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 97, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::H), Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 98, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::H), Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 99, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::H), Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 100, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::H), Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 101, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::H), Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 102, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::H), Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 103, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::H), Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 104, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::L), Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 105, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::L), Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 106, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::L), Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 107, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::L), Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 108, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::L), Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 109, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::L), Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 110, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::L), Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 111, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::L), Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 112, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HL), Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 113, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HL), Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 114, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HL), Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 115, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HL), Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 116, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HL), Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 117, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HL), Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 118, prefix: None, mnemonic: "halt".to_string(), cycles: 4, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 119, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HL), Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 120, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 121, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 122, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 123, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 124, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 125, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 126, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 127, prefix: None, mnemonic: "ld".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 128, prefix: None, mnemonic: "add".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 129, prefix: None, mnemonic: "add".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 130, prefix: None, mnemonic: "add".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 131, prefix: None, mnemonic: "add".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 132, prefix: None, mnemonic: "add".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 133, prefix: None, mnemonic: "add".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 134, prefix: None, mnemonic: "add".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 135, prefix: None, mnemonic: "add".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 136, prefix: None, mnemonic: "adc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 137, prefix: None, mnemonic: "adc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 138, prefix: None, mnemonic: "adc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 139, prefix: None, mnemonic: "adc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 140, prefix: None, mnemonic: "adc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 141, prefix: None, mnemonic: "adc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 142, prefix: None, mnemonic: "adc".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 143, prefix: None, mnemonic: "adc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 144, prefix: None, mnemonic: "sub".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 145, prefix: None, mnemonic: "sub".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 146, prefix: None, mnemonic: "sub".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 147, prefix: None, mnemonic: "sub".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 148, prefix: None, mnemonic: "sub".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 149, prefix: None, mnemonic: "sub".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 150, prefix: None, mnemonic: "sub".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 151, prefix: None, mnemonic: "sub".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 152, prefix: None, mnemonic: "sbc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 153, prefix: None, mnemonic: "sbc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 154, prefix: None, mnemonic: "sbc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 155, prefix: None, mnemonic: "sbc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 156, prefix: None, mnemonic: "sbc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 157, prefix: None, mnemonic: "sbc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 158, prefix: None, mnemonic: "sbc".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 159, prefix: None, mnemonic: "sbc".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 160, prefix: None, mnemonic: "and".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Set, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 161, prefix: None, mnemonic: "and".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Set, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 162, prefix: None, mnemonic: "and".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Set, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 163, prefix: None, mnemonic: "and".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Set, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 164, prefix: None, mnemonic: "and".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Set, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 165, prefix: None, mnemonic: "and".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Set, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 166, prefix: None, mnemonic: "and".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Set, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 167, prefix: None, mnemonic: "and".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Set, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 168, prefix: None, mnemonic: "xor".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 169, prefix: None, mnemonic: "xor".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 170, prefix: None, mnemonic: "xor".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 171, prefix: None, mnemonic: "xor".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 172, prefix: None, mnemonic: "xor".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 173, prefix: None, mnemonic: "xor".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 174, prefix: None, mnemonic: "xor".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 175, prefix: None, mnemonic: "xor".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 176, prefix: None, mnemonic: "or".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 177, prefix: None, mnemonic: "or".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 178, prefix: None, mnemonic: "or".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 179, prefix: None, mnemonic: "or".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 180, prefix: None, mnemonic: "or".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 181, prefix: None, mnemonic: "or".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 182, prefix: None, mnemonic: "or".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 183, prefix: None, mnemonic: "or".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 184, prefix: None, mnemonic: "cp".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::B)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 185, prefix: None, mnemonic: "cp".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 186, prefix: None, mnemonic: "cp".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::D)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 187, prefix: None, mnemonic: "cp".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::E)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 188, prefix: None, mnemonic: "cp".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::H)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 189, prefix: None, mnemonic: "cp".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::L)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 190, prefix: None, mnemonic: "cp".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 191, prefix: None, mnemonic: "cp".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 192, prefix: None, mnemonic: "ret".to_string(), cycles: 20, cycles_min: Some(8), args: vec![Argument::Flag(Flag::NoZero)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 193, prefix: None, mnemonic: "pop".to_string(), cycles: 12, cycles_min: None, args: vec![Argument::Register(Register::BC)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 194, prefix: None, mnemonic: "jp".to_string(), cycles: 16, cycles_min: Some(12), args: vec![Argument::Flag(Flag::NoZero), Argument::MemoryLookupWord], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 195, prefix: None, mnemonic: "jp".to_string(), cycles: 16, cycles_min: None, args: vec![Argument::MemoryLookupWord], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 196, prefix: None, mnemonic: "call".to_string(), cycles: 24, cycles_min: Some(12), args: vec![Argument::Flag(Flag::NoZero), Argument::MemoryLookupWord], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 197, prefix: None, mnemonic: "push".to_string(), cycles: 16, cycles_min: None, args: vec![Argument::Register(Register::BC)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 198, prefix: None, mnemonic: "add".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Byte], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 199, prefix: None, mnemonic: "rst".to_string(), cycles: 16, cycles_min: None, args: vec![Argument::Integer(0)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 200, prefix: None, mnemonic: "ret".to_string(), cycles: 20, cycles_min: Some(8), args: vec![Argument::Flag(Flag::Zero)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 201, prefix: None, mnemonic: "ret".to_string(), cycles: 16, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 202, prefix: None, mnemonic: "jp".to_string(), cycles: 16, cycles_min: Some(12), args: vec![Argument::Flag(Flag::Zero), Argument::MemoryLookupWord], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 203, prefix: None, mnemonic: "prefix".to_string(), cycles: 4, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 204, prefix: None, mnemonic: "call".to_string(), cycles: 24, cycles_min: Some(12), args: vec![Argument::Flag(Flag::Zero), Argument::MemoryLookupWord], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 205, prefix: None, mnemonic: "call".to_string(), cycles: 24, cycles_min: None, args: vec![Argument::MemoryLookupWord], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 206, prefix: None, mnemonic: "adc".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Byte], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 207, prefix: None, mnemonic: "rst".to_string(), cycles: 16, cycles_min: None, args: vec![Argument::Integer(8)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 208, prefix: None, mnemonic: "ret".to_string(), cycles: 20, cycles_min: Some(8), args: vec![Argument::Flag(Flag::NoCarry)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 209, prefix: None, mnemonic: "pop".to_string(), cycles: 12, cycles_min: None, args: vec![Argument::Register(Register::DE)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 210, prefix: None, mnemonic: "jp".to_string(), cycles: 16, cycles_min: Some(12), args: vec![Argument::Flag(Flag::NoCarry), Argument::MemoryLookupWord], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 211, prefix: None, mnemonic: "invalid".to_string(), cycles: 0, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 212, prefix: None, mnemonic: "call".to_string(), cycles: 24, cycles_min: Some(12), args: vec![Argument::Flag(Flag::NoCarry), Argument::MemoryLookupWord], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 213, prefix: None, mnemonic: "push".to_string(), cycles: 16, cycles_min: None, args: vec![Argument::Register(Register::DE)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 214, prefix: None, mnemonic: "sub".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Byte], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 215, prefix: None, mnemonic: "rst".to_string(), cycles: 16, cycles_min: None, args: vec![Argument::Integer(16)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 216, prefix: None, mnemonic: "ret".to_string(), cycles: 20, cycles_min: Some(8), args: vec![Argument::Register(Register::C)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 217, prefix: None, mnemonic: "reti".to_string(), cycles: 16, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 218, prefix: None, mnemonic: "jp".to_string(), cycles: 16, cycles_min: Some(12), args: vec![Argument::Flag(Flag::Carry), Argument::MemoryLookupWord], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 219, prefix: None, mnemonic: "invalid".to_string(), cycles: 0, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 220, prefix: None, mnemonic: "call".to_string(), cycles: 24, cycles_min: Some(12), args: vec![Argument::Flag(Flag::Carry), Argument::MemoryLookupWord], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 221, prefix: None, mnemonic: "invalid".to_string(), cycles: 0, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 222, prefix: None, mnemonic: "sbc".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::Byte], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 223, prefix: None, mnemonic: "rst".to_string(), cycles: 16, cycles_min: None, args: vec![Argument::Integer(24)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 224, prefix: None, mnemonic: "ldh".to_string(), cycles: 12, cycles_min: None, args: vec![Argument::MemoryLookupByte, Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 225, prefix: None, mnemonic: "pop".to_string(), cycles: 12, cycles_min: None, args: vec![Argument::Register(Register::HL)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 226, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::C), Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 227, prefix: None, mnemonic: "invalid".to_string(), cycles: 0, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 228, prefix: None, mnemonic: "invalid".to_string(), cycles: 0, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 229, prefix: None, mnemonic: "push".to_string(), cycles: 16, cycles_min: None, args: vec![Argument::Register(Register::HL)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 230, prefix: None, mnemonic: "and".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Byte], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Set, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 231, prefix: None, mnemonic: "rst".to_string(), cycles: 16, cycles_min: None, args: vec![Argument::Integer(32)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 232, prefix: None, mnemonic: "add".to_string(), cycles: 16, cycles_min: None, args: vec![Argument::Register(Register::SP), Argument::ByteSigned], flags: FlagState { zero: FlagModifier::Unset, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 233, prefix: None, mnemonic: "jp".to_string(), cycles: 4, cycles_min: None, args: vec![Argument::MemoryLookupRegister(Register::HL)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 234, prefix: None, mnemonic: "ld".to_string(), cycles: 16, cycles_min: None, args: vec![Argument::MemoryLookupWord, Argument::Register(Register::Accumulator)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 235, prefix: None, mnemonic: "invalid".to_string(), cycles: 0, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 236, prefix: None, mnemonic: "invalid".to_string(), cycles: 0, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 237, prefix: None, mnemonic: "invalid".to_string(), cycles: 0, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 238, prefix: None, mnemonic: "xor".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Byte], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 239, prefix: None, mnemonic: "rst".to_string(), cycles: 16, cycles_min: None, args: vec![Argument::Integer(40)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 240, prefix: None, mnemonic: "ldh".to_string(), cycles: 12, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupByte], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 241, prefix: None, mnemonic: "pop".to_string(), cycles: 12, cycles_min: None, args: vec![Argument::Register(Register::AF)], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Operation, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 242, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupRegister(Register::C)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 243, prefix: None, mnemonic: "di".to_string(), cycles: 4, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 244, prefix: None, mnemonic: "invalid".to_string(), cycles: 0, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 245, prefix: None, mnemonic: "push".to_string(), cycles: 16, cycles_min: None, args: vec![Argument::Register(Register::AF)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 246, prefix: None, mnemonic: "or".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Byte], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Unset, carry: FlagModifier::Unset, half_carry: FlagModifier::Unset } },
        Instruction { op_code: 247, prefix: None, mnemonic: "rst".to_string(), cycles: 16, cycles_min: None, args: vec![Argument::Integer(48)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 248, prefix: None, mnemonic: "ld".to_string(), cycles: 12, cycles_min: None, args: vec![Argument::Register(Register::HL), Argument::ByteSigned], flags: FlagState { zero: FlagModifier::Unset, negative: FlagModifier::Unset, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 249, prefix: None, mnemonic: "ld".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Register(Register::SP), Argument::Register(Register::HL)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 250, prefix: None, mnemonic: "ld".to_string(), cycles: 16, cycles_min: None, args: vec![Argument::Register(Register::Accumulator), Argument::MemoryLookupWord], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 251, prefix: None, mnemonic: "ei".to_string(), cycles: 4, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 252, prefix: None, mnemonic: "invalid".to_string(), cycles: 0, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 253, prefix: None, mnemonic: "invalid".to_string(), cycles: 0, cycles_min: None, args: vec![], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
        Instruction { op_code: 254, prefix: None, mnemonic: "cp".to_string(), cycles: 8, cycles_min: None, args: vec![Argument::Byte], flags: FlagState { zero: FlagModifier::Operation, negative: FlagModifier::Set, carry: FlagModifier::Operation, half_carry: FlagModifier::Operation } },
        Instruction { op_code: 255, prefix: None, mnemonic: "rst".to_string(), cycles: 16, cycles_min: None, args: vec![Argument::Integer(56)], flags: FlagState { zero: FlagModifier::Untouched, negative: FlagModifier::Untouched, carry: FlagModifier::Untouched, half_carry: FlagModifier::Untouched } },
    ]
}