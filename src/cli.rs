// External Dependencies ------------------------------------------------------
use clap::{Arg, Command};

pub fn app<'help>() -> Command<'help> {
    Command::new("gbc")
        .version(env!("CARGO_PKG_VERSION"))
        .author("Ivo Wetzel <ivo.wetzel@googlemail.com>")
        .about("An opionated GameBoy Compiler")
        .subcommand(
            Command::new("release")
                .about("Builds a release ROM using the local \"gbc.toml\" project configuration.")
        )
        .subcommand(
            Command::new("debug")
                .about("Builds a debug ROM using the local \"gbc.toml\" project configuration.")
        )
        .subcommand(
            Command::new("run")
                .about("Builds a ROM and runs it via the specified configuration.")
                .arg(Arg::new("RUNNER")
                    .help("Runner config to use, if the configuration does not exist the argument will be interpreted as a program instead")
                    .required(true)
                    .multiple_values(true)
                    .index(1)
                )
        )
        .arg(Arg::new("SOURCE_FILE")
            .help("Input source file")
            .index(1)
        )
        .arg(Arg::new("ROM_FILE")
            .long("output-rom")
            .short('o')
            .value_name("FILE")
            .takes_value(true)
            .help("ROM file to generate")
        )
        .arg(Arg::new("SYMBOL_MAP_FILE")
            .long("symbol-map")
            .short('m')
            .value_name("FILE")
            .takes_value(true)
            .help("Output symbol mapping for debuggers")
        )
        .arg(Arg::new("SOURCE_MAP_FILE")
            .long("source-map")
            .short('u')
            .value_name("FILE")
            .takes_value(true)
            .help("Output source mapping for debuggers")
        )
        .arg(Arg::new("info")
            .long("info")
            .short('i')
            .help("Display ROM info")
        )
        .arg(Arg::new("segments")
            .long("segments")
            .short('S')
            .help("Display segments usage")
        )
        .arg(Arg::new("silent")
            .long("silent")
            .short('s')
            .help("Surpress all output")
        )
        .arg(Arg::new("no-optimize")
            .long("no-optimize")
            .help("Disable instruction optimizations")
        )
        .arg(Arg::new("debug")
            .long("debug")
            .short('D')
            .help("Enable debug instructions for BGB debugger")
        )
        .arg(Arg::new("decompile")
            .long("decompile")
            .short('d')
            .help("Decompile the input file instead")
        )
}
