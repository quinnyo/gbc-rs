// External Dependencies ------------------------------------------------------
use clap::{Arg, App, SubCommand};

pub fn app<'a>() -> App<'a, 'a> {
    App::new("gbc")
        .version("0.5")
        .author("Ivo Wetzel <ivo.wetzel@googlemail.com>")
        .about("GameBoy Compiler")
        .subcommand(
            SubCommand::with_name("release")
                .about("Builds a release ROM using the local \"gbc.toml\" project configuration.")
        )
        .subcommand(
            SubCommand::with_name("debug")
                .about("Builds a debug ROM using the local \"gbc.toml\" project configuration.")
        )
        .subcommand(
            SubCommand::with_name("emu")
                .about("Builds a ROM and emulates it via the specified configuration.")
                .arg(Arg::with_name("EMULATOR")
                    .help("Emulator config to use")
                    .required(true)
                    .index(1)
                )
        )
        .arg(Arg::with_name("SOURCE_FILE")
            .help("Input source file")
            .index(1)
        )
        .arg(Arg::with_name("ROM_FILE")
            .long("output-rom")
            .short("o")
            .value_name("FILE")
            .takes_value(true)
            .help("ROM file to generate")
        )
        .arg(Arg::with_name("MAP_FILE")
            .long("symbol-map")
            .short("m")
            .value_name("FILE")
            .takes_value(true)
            .help("Output symbol mapping for BGB debugger")
        )
        .arg(Arg::with_name("info")
            .long("info")
            .short("i")
            .help("Display ROM info")
        )
        .arg(Arg::with_name("segments")
            .long("segments")
            .short("S")
            .help("Display segments usage")
        )
        .arg(Arg::with_name("lint")
            .long("lint")
            .short("l")
            .help("Run linter only and display warnings")
        )
        .arg(Arg::with_name("silent")
            .long("silent")
            .short("s")
            .help("Surpress all output")
        )
        .arg(Arg::with_name("no-optimize")
            .long("no-optimize")
            .help("Disable instruction optimizations")
        )
        .arg(Arg::with_name("debug")
            .long("debug")
            .short("D")
            .help("Enable debug instructions for BGB debugger")
        )
        .arg(Arg::with_name("decompile")
            .long("decompile")
            .short("d")
            .help("Decompile the input file instead")
        )
}
